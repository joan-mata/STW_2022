1.- 
> f1 = (a) => console.log(a)
[Function: f1]
> f1(3)
3
undefined

2.-
> f2 = (a) => a>=0 ? 2*a : -1
[Function: f2]
> f2(3)
6
> f2(-2)
-1

3.-
> f3 = (llista) => llista.map(x=> f2(x)+23)
[Function: f3]
> f3([1,2,3])
[ 25, 27, 29 ]

4.-
> console.printaki = function(){ console.log("aqui") }
[Function (anonymous)]
> console.printaki()
aqui
undefined

5.-
> f4 = (a,b) => a+b
[Function: f4]
> llistaA = [1,2,3,4]
[ 1, 2, 3, 4 ]
> llistaB = llistaA.map(x=> f4(x,23))
[ 24, 25, 26, 27 ]

6.-
> f5 = (a,b,c) => c(b(a))
[Function: f5]
> f5(1, f2, function(r) {Â console.log(r) })
2
undefined

7.- 
> printaki2 = function() { 
... var i = 0
... return function() { console.log("aqui " + i); i++ };
... }
[Function: printaki2]
> console.printaki2 = printaki2()
[Function (anonymous)]
> console.printaki2()
aqui 0
undefined
> console.printaki2()
aqui 1
undefined
> console.printaki2()
aqui 2
undefined

8.-
> fs = require('fs')
callback_final = (resultat) => console.log(resultat)
[Function: callback_final]
> f6 = function(llista, callback_final) {
... var resultat = []
... var callback = function(err, data) {
..... if (err) { throw err }
..... else { resultat.push(data) }
..... if (resultat.length == llista.length) {
....... callback_final(resultat)
....... }
..... }
... llista.forEach(filename => fs.readFile(filename, 'utf-8', callback)) 
... }
[Function: f6]
> llista['a1.txt', 'a2.txt']
Uncaught ReferenceError: llista is not defined
> llista = ['a1.txt', 'a2.txt']
[ 'a1.txt', 'a2.txt' ]
> f6(llista, callback_final)
undefined
> [ 'contingut a1.txt', 'contingut a2.txt' ]

9.-
> fs = require('fs')
callback_final = (resultat) => console.log(resultat)
[Function: callback_final]
> f6 = function(llista, callback_final) {
... var resultat = []
... var f7 = function(element, index) {
..... var callback = function(err, data) {
....... resultat[index] = data;
....... if (!resultat.includes(0)) {
......... callback_final(resultat)
......... }
....... fs.readFile(element, 'utf-8', callback)
....... }
..... }
... llista.forEach(f7)
... }
[Function: f6]


10.-

11.-

12.-

13.-

14.-

15.-


